val tail =
  fun of (xs [List]) = {
    list_match xs {
      case nil => nil
      case cons x ys => ys
    }
  };

val xs1 = cons 1 (cons 2 nil);
val res1 [{ [Cons[{[Nat] 2}, {[List] nil}]] cons 2 nil }] = tail xs1;

val xs2 [List] = xs1;
val res2 [List] = tail xs2;

val xs3 [List] = nil;
val res3 [List] = tail xs3;

()
